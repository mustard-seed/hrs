function jeppler_hsrsar_backproj
close all;

%define physical constants
c = 299792458.0;

%define geometry
geom.p_t = [0, 0, 30]; %transmitter location
geom.v = [0.0, 100.0, 0.0]; %constant velocity of receiver on train
geom.p_r_0 = [50, -500, 4.5]; %initial position of receiver on train
p_s_1 = [500, 0.0, 0.0]; %test scatterer

%define system parameters
fc = 9e8;
fc_band = 300.0e6;
del_fc = 200e3;
fd_samp = 1000.0; %baseband sample rate (Hz)
t_range = [0, 10.0]; %data acquisition time interval

%define image formation parameters
doppler_fraction = 0.99; %fraction of full Doppler spectrum to be used for each target - small fraction means lower resolution but faster processing

%derived values
t = t_range(1): 1/fd_samp:t_range(2);
fc_vec = fc-fc_band/2:del_fc:fc+fc_band/2;
fc_vec = ifftshift(fc_vec);
fc_band = max(fc_vec)-min(fc_vec);

%simulate data acquisition
signal = get_signal(geom, p_s_1,fc_vec, t); %baseband signal per tone
[n_rng, n_az] = size(signal);

%correct for freq. component of FSPL
fc_mat = repmat(fc_vec',1,n_az);
signal = signal.*fc_mat;

%range compression
window = fftshift(hamming(n_rng));
window_mat = repmat(window,1,n_az);
signal_rc = flipud(ifft(window_mat.*signal,[],1)); %range compressed signal ... flip needed due to sign convention of signal phase

%correct for range component of FSPL
del_rng = c/fc_band; %m
ranges = (0:n_rng-1)*del_rng*4*pi()/c;
range_interval = n_rng*del_rng;
ranges_mat = repmat((ranges').*4*pi()/c,1,n_az);
signal_rc = signal_rc.*ranges_mat;

%set-up interpolation of range compressed data
signal_rc_ex = [signal_rc' (signal_rc(1,:))']'; %concatenate zero range row to the end to enable wrapped interpolation in the case when the range lies between last and first value
[X, Y] = ndgrid([ranges, ranges(end)+del_rng], t);
GI = griddedInterpolant(X,Y, signal_rc_ex); %set-up interpolation object

%target_analysis(p_s_1, geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);

%focus and render 3 cartesian slices centered on test target
orth_config.dx = 0.2; orth_config.dy = 0.2; orth_config.dz = 0.2;
orth_config.xwin = 10; orth_config.ywin = 10; orth_config.zwin = 10;
target_orth_slice(p_s_1, geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval, orth_config)

%misc renderings
% figure;
% imagesc(abs(signal_rc));figure(gcf);
% colormap(gray);
% figure;
% imagesc(abs(signal));figure(gcf);
% colormap(gray);
end

%--------------------------------------------------------------------------
function target_analysis(p_s, geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval)
%quality assessement of test target along x and y axes
xwin = 100;
ywin = 50;
dx = 0.1; 
dy = 0.1;

x_vec = (-1*xwin:dx:xwin) + p_s(1);
y_vec = (-1*ywin:dy:ywin) + p_s(2);

x_profile = zeros(length(x_vec),1);
y_profile = zeros(length(y_vec),1);

for ii = 1:length(x_vec)
    x_profile(ii) = back_proj_focus_point([x_vec(ii), p_s(2), p_s(3)], geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);
end
for ii = 1:length(y_vec)
    y_profile(ii) = back_proj_focus_point([p_s(1), y_vec(ii), p_s(3)], geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);
end

x_profile = x_profile./max(max(abs(x_profile)));
y_profile = y_profile./max(max(abs(y_profile)));

figure('units','normalized','outerposition',[0 0 1 1]);
subplot(2,1,1);
plot(20*log10(abs(x_profile)));

subplot(2,1,2);
plot(20*log10(abs(y_profile)));

figure;
plot(20*log10(abs(resample(x_profile,10,1))));


end

%--------------------------------------------------------------------------
function stats = profile_analysis(x_vec, profile)

interpolate2
end
%--------------------------------------------------------------------------
function target_orth_slice(p_s, geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval, orth_config)
%focus and render 3 cartesian slices centered on test target
x_vec = (-1*orth_config.xwin:orth_config.dx:orth_config.xwin) + p_s(1);
y_vec = (-1*orth_config.ywin:orth_config.dy:orth_config.ywin) + p_s(2);
z_vec = (max([0, -1*orth_config.zwin]):orth_config.dz:orth_config.zwin) + p_s(3);

img_xy = zeros(length(x_vec), length(y_vec));
img_xz = zeros(length(x_vec), length(z_vec));
img_yz = zeros(length(y_vec), length(z_vec));
img_xy = complex(img_xy, img_xy);
img_xz = complex(img_xz, img_xz);
img_yz = complex(img_yz, img_yz);

for ii = 1:length(x_vec)
    for jj = 1:length(y_vec)
        img_xy(ii,jj) = back_proj_focus_point([x_vec(ii), y_vec(jj), p_s(3)], geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);
    end
end
for ii = 1:length(x_vec)
    for jj = 1:length(z_vec)
        img_xz(ii,jj) = back_proj_focus_point([x_vec(ii),  p_s(2), z_vec(jj)], geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);
    end
end
for ii = 1:length(y_vec)
    for jj = 1:length(z_vec)
        img_yz(ii,jj) = back_proj_focus_point([p_s(1), y_vec(ii), z_vec(jj)], geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval);
    end
end

img_xy = img_xy./max(max(abs(img_xy)));
img_xz = img_xz./max(max(abs(img_xz)));
img_yz = img_yz./max(max(abs(img_yz)));

figure;
subplot(2,2,1);
imagesc(x_vec,y_vec,abs(img_xy'));
set(gca,'YDir','normal');
colormap(gray);    

subplot(2,2,2);
imagesc(x_vec,z_vec,abs(img_xz'));
set(gca,'YDir','normal');
colormap(gray);   

subplot(2,2,3);
imagesc(y_vec,z_vec,abs(img_yz'));
set(gca,'YDir','normal');
colormap(gray);    

figure('units','normalized','outerposition',[0 0 1 1]);
subplot(2,1,1);
plot(20*log10(abs(img_xy(:,floor(length(y_vec)/2) + 1))));
subplot(2,1,2);
plot(20*log10(abs(img_xy(floor(length(x_vec)/2) + 1,:))));

end

%--------------------------------------------------------------------------
function backscatter = back_proj_focus_point(p_s, geom, fc, doppler_fraction, t_range, fd_samp, GI, range_interval)
%uses back projection to focus a single point from the already range
%compressed data (supplied as a griddedInterpolant object)
c = 299792458.0;
del_y_factor = (doppler_fraction/sqrt(1-doppler_fraction^2));
del_xz = sqrt((geom.p_r_0(1) - p_s(1))^2 + (geom.p_r_0(3) - p_s(3))^2); %distance from current scatterer to Rx (assumes y only train velocity)
del_y = del_y_factor*del_xz;
t_range_segment = [max((p_s(2) - del_y - geom.p_r_0(2))/geom.v(2), t_range(1)), min((p_s(2) + del_y - geom.p_r_0(2))/geom.v(2), t_range(2))]; %again, train velocity assumed here
t_segment = t_range_segment(1): 1/fd_samp:t_range_segment(2);
rTotal = r_total(geom, p_s, t_segment);
rTotal_folded = mod(rTotal, range_interval);
window = hamming(length(t_segment))';
backscatter = sum(window.*GI(rTotal_folded, t_segment).*exp(complex(0,-2*pi*(rTotal_folded)./(c/fc)))); %actual back projection coherent summation with windowing 
end

%--------------------------------------------------------------------------
function rTotal = r_total(geom, p_s_, t)
%computes two leg bistatic range vector corresponding to given time vector
%t and defined geomtery
%Tx, scatterer and Rx positions
nt = length(t);
p_t = geom.p_t'*ones(1,nt);
p_s = p_s_'*ones(1,nt);
p_r = geom.p_r_0'*ones(1,nt) + geom.v'*t;

%two leg vector
Rts = p_s - p_t;
Rsr = p_r - p_s;

%two leg ranges
Rts_norm = sqrt(Rts(1,:).^2+Rts(2,:).^2+Rts(3,:).^2);
Rsr_norm = sqrt(Rsr(1,:).^2+Rsr(2,:).^2+Rsr(3,:).^2);

%total range
rTotal = Rts_norm + Rsr_norm;
end

%--------------------------------------------------------------------------
function signal = get_signal(geom, p_s, fc, t)
%computes 2D complex signal matrix (time x carrier ferquency) for a given
%scatterer loaction and defined geometry
c = 299792458.0;
rTotal = r_total(geom, p_s, t);
signal = zeros(length(fc), length(rTotal));
for i_fc = 1:length(fc)
    lambda = c/fc(i_fc);
    
    % Free space path loss
    FSPL_linear = 1./((4*pi()/c.*rTotal.*fc(i_fc)));
    
    % Received signal
    signal(i_fc, :) = FSPL_linear.*exp(complex(0, 2*pi*(rTotal)./lambda));
end
end